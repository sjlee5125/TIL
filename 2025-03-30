계층적 구조 (Layered Architecture)

계층적 구조는 전체 애플리케이션의 관심사를 계층별로 분리하여 각 계층이 느슨하게 결합되고, 유연하게 동작할 수 있도록 구조화한 소프트웨어 아키텍처 패턴입니다.

## 계층적 구조의 목적

- 웹 애플리케이션을 효율적으로 개발
- 유지보수 용이
- 코드의 재사용성과 확장성 확보
- 관심사의 분리 (Separation of Concerns)

## 계층 구조의 문제점 (미적용 시)

- 코드의 복잡성 증가
- 유지보수의 어려움
- 유연성 부족
- 중복 코드 증가
- 낮은 확장성

---

## 주요 계층 설명

### 1. 도메인 객체 (Domain Object)
- 정보를 저장하는 **데이터 모델**
- 예: `User`, `Product`, `Order` 등의 클래스 또는 구조체

---

### 2. 퍼시스턴스 계층 (Persistence Layer)
- 데이터 액세스 계층
- 데이터베이스나 파일에 접근하여 데이터를 저장하거나 조회
- 예: DAO (Data Access Object), Repository

---

### 3. 서비스 계층 (Service Layer)
- **비즈니스 로직 처리 계층**
- 퍼시스턴스 계층을 호출하여 클라이언트 요청 처리
- 프레젠테이션 계층과 퍼시스턴스 계층 사이의 연결 고리 역할

---

### 4. 프레젠테이션 계층 (Presentation Layer)
- 애플리케이션과 사용자(브라우저) 사이의 접점
- 사용자로부터 데이터를 입력받거나 출력
- View + Controller + Model (MVC 패턴 활용 가능)

---

## 구현 과정 (개발 순서)

1. **도메인 객체 정의**
2. 퍼시스턴스 계층 구현
3. 서비스 계층 구현
4. 프레젠테이션 계층 구현 (Controller → View)

---

## 용어 비교: Layer vs Tier

| 용어   | 의미                         |
|--------|------------------------------|
| Layer | 논리적인 계층 구조 (코드 구조)  |
| Tier  | 물리적인 배치 구조 (서버 분리 등) |

---

## 계층 흐름도 요약

```plaintext
웹 브라우저
     ↓ 요청
[프레젠테이션 계층] (View, Controller, Model)
     ↓
[서비스 계층]
     ↓
[퍼시스턴스 계층]
     ↓
[데이터베이스]
