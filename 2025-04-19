###
앱 개발방식
컴퓨팅 사고
-	문제분해 
-	패턴인식 
-	추상화(일반화) 
-	알고리즘 설계
인공지능 활용
플러터 특징
•	크로스플랫폼 지원
•	고성능
•	사용자 정의 UI 구성 용이
•	빠른 개발
•	강력한 커뮤니티 및 생태계
다트
-	변수 타입: 데이터(값)을 저장하는 장소
	변수 종류를 타입(type) 또는 자료형이라 함
	Dart는 크게 숫자형과 문자열의 기본 변수 타입을 제공 함
	int : 정수
double : 실수(소수점)
String: 문자열
bool: 참 또는 거짓
-	상수 final : 값이 한번 설정하면 바꿀 수 없는 것
-	 final과 const의 차이점 : final은 동작중에 값이 고정되나 const는 컴파일 시점에서 값이 고정 됨
타입 검사 (is, is!) 연산 결과 : bool형
•	is : 같은 타입이면 true, 아니면 false
•	is! : 같은 타입이면 false, 아니면 true
형 변환 요약 (C# 및 유사 언어 기준)
•	형 변환(Casting): 데이터 타입을 다른 타입으로 변환하는 것
•	명시적 형 변환 필요: double → int처럼 정보 손실이 있는 경우, 명시적 형 변환
•	객체지향에서 형 변환 필요성:
o	부모 ↔ 자식 클래스 간 업캐스팅/다운캐스팅 시 사용
o	다양한 타입을 하나의 컬렉션에 담거나, 특정 기능 호출 시 필요
class Prompt {
  String text;
  Prompt(this.text);
}
class QuestionPrompt extends Prompt {
  String difficulty;
  QuestionPrompt(String text, this.difficulty) : super(text);
  void analyzeWithLLM() {
    print("LLM 분석 중: '$text' (난이도: $difficulty)");
  }
}
void main() {
  Prompt p = QuestionPrompt("Explain inheritance", "Easy");  // 업캐스팅
  if (p is QuestionPrompt) {
    QuestionPrompt q = p as QuestionPrompt;  // 다운캐스팅
    q.analyzeWithLLM();  // LLM 분석 중: 'Explain inheritance' (난이도: Easy)
  }
}
선택 매개변수 : 선택적으로 함수에 전달하고자 하는 매개변수의 경우{}로 표시
상속 vs 인터페이스: 
상속 : 
-	하나의 부모 클래스로부터 기능(속성_+메소드)을 물려받음
-	Extends 키워드 사용
-	코드 재사용에 유리 
-	단일 상속만 가능(부모는1 명만)
장점 : 코드 재사용률 up, 공통 기능 통합 관리(유지보수 편리)
단점 : 유연성 down (이미  상속한 부모 외 다른 기능 추가 어려움), 
다중상속 불가 -> 구조 복잡해지면 문제
인터페이스 : 
-	기능(메서드 시그니처(만 정의 -> 구현은 자식 클래스가 직접 함
-	dart에서는 implements로 구현
-	유연성up , 설계중심 개발
장점 : 다중 구현 가능 , 설계중심 -> 협업/표준화에 강력
단점 : 코드재사용불가 (구현은 항상 자식이 직접) , 
모든메소드 구현 필요 -> 반복필요 많아짐
클래스 :객체의 설계도, 설계도에 의해 만들어진 형태를 객체, 또는 클래스를 인스턴스화 
List : 순서가 있는 연속된 자료를 표현할 때 사용
List<String> items = [ ‘짜장’, ‘라면’, ‘볶음밥’ ];
var items = [ ‘짜장’, ‘라면’, ‘볶음밥’ ];
Map : 키와 값으로 쌍 지어진 사전 형태의 자료 구조를 표현할 때 사용(=Dictionary )
// Map<String, String> cityMap = { ... } 과 같음
var cityMap = {
  '한국': '부산',
  '일본': '도쿄',
 	 '중국': '북경',};

// 기존 값 변경
cityMap['한국'] = '서울';
print(cityMap.length);      // 3
print(cityMap['중국']);     // 북경
print(cityMap['미국']);     // null (아직 존재하지 않음)
// 새로운 값 추가
cityMap['미국'] = '워싱턴';
print(cityMap['미국']);     // 워싱턴
Set : 중복되지 않는 집합을 표현할 때 사용함
 	// Set<String> citySet = { ... } 와 같음
var citySet = {'서울', '수원', '오산', '부산'};
// 요소 추가
citySet.add('안양');      // '안양' 추가
// 요소 삭제
citySet.remove('수원');   // '수원' 삭제
// 포함 여부 확인
print(citySet.contains('서울'));   // true
print(citySet.contains('도쿄'));   // false
함수형 프로그래밍 : 
-	일급 객체 : 값이나 개체가 언어 내에서 동등한 대우를 받는다는 것
함수를 변수에 저장할 수 있음
함수를 함수 인자에 넘길 수 있음
함수를 함수의 반환값으로 사용할 수 있음
-	ForEach : 다트 언어의 일급 객체의 특징으로 List의 목록을 조회하는 foreach()메서드 가능
-	Where: 조건을 필터링할 때 사용하는 함수
-	Map : 반복되는 값을 다른 형태로 변환하는 함수

-	컬렉션 if : 조건에 따라 요소를 넣을지 말지 결정

var isKorean = true;
var items = [
  '짜장',
  '라면',
  if (isKorean) '김치'  // 조건이 true일 때만 추가됨
];

print(items);  // [짜장, 라면, 김치]
-	컬렉션 for : 반복문을 이용해 컬렉션 생성
var base = ['a', 'b', 'c'];
var result = [
  for (var ch in base) ch.toUpperCase()
];
print(result);  // [A, B, C]
Pubspec.yaml : 플루터/다트 프로젝트의 설정 파일
name: my_app         # 앱 이름
description: A new Flutter project.   # 설명
version: 1.0.0       # 버전 정보
environment:         # Dart SDK 환경
  sdk: '>=3.0.0 <4.0.0'
dependencies:        # 사용하는 외부 패키지 목록
  flutter:
    sdk: flutter
  cupertino_icons: ^1.0.2
  http: ^0.13.5
dev_dependencies:    # 개발 전용 패키지 (예: 테스트)
  flutter_test:
    sdk: flutter
flutter:
  uses-material-design: true
  assets:
    - assets/images/   # 이미지/파일 경로
 
StatlessWidget :
-	상태를 저장하지 않음 -> UI가 고정됨
-	Build()한 번 실행 -> 상태 변경되도 반응x
-	 

StatefulWidget :
-	setState()를 호출하면 build()가 다시 실행됨
-	UI가 상태에 따라 동적으로 반응
import 'package:flutter/material.dart';

void main() => runApp(MyStatefulApp());

class MyStatefulApp extends StatefulWidget {
  @override
  _MyStatefulAppState createState() => _MyStatefulAppState();
}

class _MyStatefulAppState extends State<MyStatefulApp> {
  int count = 0;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text("Stateful 예제")),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text("버튼을 누른 횟수: $count"),
              ElevatedButton(
                onPressed: () {
                  setState(() {
                    count++;
                  });
                },
                child: Text("증가하기"),
              ),
            ],
          ),
화면 배치에 쓰는 위젯 : 
-	Container : 너비, 높이가 있는 영역
-	Column : 수직 방향으로 위젯들을 배치
-	Row : 수평 방향으로 위젯들을 배치
-	Stack :위젯들을 순서대로 겹치게함
-	SingleChildScrollView : 화면크기를 넘어가면 스크롤이 생기게 함
-	ListView, ListTile : 리스트를 표시하는 위젯
-	GridVIew : 열 수를 지정하여 그리드 형태로 표시하는 위젯
-	PageVIew : 여러 페이지를 좌우로 슬라이드하여 넘길 수 있음
-	AppBar ,Tab,TabBarView : AppBar에 TabBar를 배치하고 Tab및 body에 TabBar View를 배치하여 탭으로 이동하는 화면을 구성
-	BottomNavigationBar: 하단에 2~5개의 탭 메뉴를 구성할 수 있게 해주는 위젯
위치,정렬 크기 위젯:
-	Center : 중앙으로 정렬시키는 위젯
-	Padding : 안쪽 여백을 표현할 때 사용하는 위젯
-	Align : 자식 위젯을 정렬 방향을 지정하는 위젯
-	Expanded : 자식 위젯의 크기를 최대한으로 확장시켜주는 위젯
-	SizeBox : 자식 위젯을 특정 사이즈로 조정하고자 할 때 사용하는 위젯
-	Card : 카드 형태의 모양을 제공해주는 위젯
버튼 위젯 : 
-	ElevatedButton : 입체감을 가지는 일반적인 버튼 위젯
-	TextButton : 평평한 텍스트 버튼 위젯
-	IconButton : 아이콘을 표시하는 버튼 위젯
-	FloatingActionButton : 입체감 있는 둥근 버튼 위젯
입력 위젯 : 
-	TextField : 글자를 입력받는 위젯
-	CheckBox와 Switch : 선택 체크, 체크해제를 지워나흔 위젯
-	Radion와 RadioListTile : 선택 그룹 중 하나를 선택할 때 사용하는 위젯
-	DropDownButton : 여러 아이템 중 하나를 고를 수 있는 형태의 위젯
다이얼로그 위젯 : 
-	AlertDialog : 사용자 확인을 요구하거나 메시지를 표시하는 용도
-	DatePicker : 날짜를 선택할 때 사용
-	TimePicker : 시간을 선택할 때 사용


이벤트 위젯 : 
-	GestureDetector , InkWell : 글자나 그림같이 이벤트 속성이 없는 위젯에서 이벤트를 사용하고자 할 때 사용
애니메이션 위젯 : 
-	Hero : 페이지 전환시 연결되는 애니메이션 지원 (tag값을 동일하게 맞춤)
-	AnimatedContainer : 한 화면 내에서 변경된 프로퍼티에 의해 애니메이션
-	SilverAppBar , SilverFillRemaining : 화면 헤더를 동적으로 표현
-	SilverAppBar , SilverList : LIstView를 사용하여 Silver효과를 주고자 할 때
쿠퍼티노 디자인 : 
-	쿠퍼티노 기본UI : 머터리얼 디자인 대신 쿠퍼티노 디자인 적용
-	CupertinoAlertDialog :쿠퍼티노 스타일의 AlertDialog
-	CupertinoPicker : ios에서 자주사용되는 피커
네비게이션 동작성 : 
-	First , Second Page작성
-	Push로 새로운 화면 호출 , pop으로 이전화면으로 이동
-	새로운 화면에 값 전달하기 : 생성자 매개변수로 값 전달
-	이전 화면으로 데이터 돌려주기 : pop()매개변수 -> push() 변환값 전달
Routes를 활용한 네비게이션 :
 routes정의 ->  routes에 의한 화면이동 (push()대신 pushNamed()사용
StatefulWidget의 상태 : 
-	InitState() : 위젯이 생성되 때 호출
-	Build() : 위젯이 그려져야 할 때 호출
-	Dispose() : 위젯이 완전히 종료될 때(pop 될때)호출
Null Safety (널안전) : 컴파일 타임에 null오류를 방지할 수 있게 해주는 dart기능
-	String : 절대 null이 될수 없는 변수
-	String? : null이 될 수도 있는 변수
-	Late : 초기화를 늦출 수 있지만 반드시 나중에 값을 설정해야 함
-	! : null이 아님을 강제로 단언
-	?? : null일 경우 대체값 제공
-	?. : null이면 메서드나 프로퍼티를 호출하지 않음
String name = '홍길동';     // null 불가
String? nickname;         // null 가능
void main() {
  nickname = '길동이';
  print(name.length);       // OK
  print(nickname?.length);  // null-safe 방식
  print(nickname ?? '없음'); // null이면 '없음' 출력
}
왜 중요 :
-	앱 실행 중 null로 인한 크래시방지
-	코드의 신뢰성과 안정성 향상
-	컴파일 타임에 오류 미리잡음
Flutter3에서는 기본적으로 널안전이 강제 적용 
•	8장 플러터 2변경점 : 1문항
o	널 안전한 코드 : 1문항 (!주의! flutter 3기준으로 널에 안전한 코드를 LLM을 활용해서 숙지할 것!)

