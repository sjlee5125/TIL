자바역사 : 
•썬마이크로시스템즈의제임스고슬링팀에서개발한객체지향프로그래밍언어
•1991년그린프로젝트라는이름으로시작해1995년발표됨
•초기가전제품에탑재해동작하는프로그램을위해개발됨
•현재웹애플리케이션서버분야에서많이사용됨
•2009 ~ 2010년Oracle이썬마이크로시스템즈를인수하면서소유권이Oracle로이전됨
•2012년Android에서Java API사용관련Oracle과Google간의분쟁발생
•2016년1월Oracle은JDK9 기반Java 런타임환경에서브라우저플러그인(Applet)을중단
•2017년9월Oracle은Java EE를Eclipse Foundation에제출함
•EclipseFoundation은javax및java 상표사용에Oracle과합의실패
•javax및java 상표를사용하지못해Jakarta EE로명칭및패키지명변경
Java의 특징
•	WORA (Write Once, Run Anywhere): 한 번 작성한 코드는 어떤 OS에서도 실행 가능
•	컴파일 방식: Java 컴파일러가 **바이트코드(.class)**로 변환 → 각 OS의 JVM에서 실행
•	표준화:
o	Java API는 **JCP(Java Community Process)**를 통해 표준화
o	JSR(Java Specification Request): Java 플랫폼에 대한 공식 제안 문서
자바 라이선스 : oracle jdk는 일정 기간 무료 ,이후 유료
•	Spring Framework : 
대규모 자바 애플리케이션을 신속하고 편리하게 개발할 수 있게 해주는 오픈소스 프레임워크
•	일반적으로 **스프링(Spring)**이라 불리며,
➤ 좁게는 Spring Framework,
➤ 넓게는 Spring 생태계 전체를 의미함 (ex: Spring Boot, Spring Data 등)

스프링프레임웍특징 :
-	일반적인 자바 객체를 위한 POJO 지원
-	객체간의 결합도를 줄이는 의존성 주입(DI) 지원
-	공통 모듈을 재사용하기위한AOP 지원
-	일관성있는 모듈의 트랜잭션 지원
-	전자 정부 표준 프레임워크의 기반 기술
-	대한민국 공공기관의 웹애플리케이션개발시 사용이 권장되는 국가가 관리하는 공식 프레임 워크
스프링 모듈 역할 : 

Spring FrameWork(Core) : 핵심 컨테이너 및 의존성 주입(DI) 프레임워크 구성 (Spring Beans, Spring MVC, Spring Web 등 포함)
Spring WebFlux :  비동기 / 논블로킹(Reactive)웹 애플리케이션 지원
Spring Boot : 독립 실행형 스프링 앱을 쉽게 연동할 수 있도록 인터페이스 기반 데이터 접근 지원
Spring Data : 다양한 데이터베이스와 쉽게 연동할 수 있도록 인터페이스 기반 데이터접근 제공
Spring Security : 인증,권한 제어 등 강력한 보안 기능 제공
Spring Integration : 메시징 기반으로 내부 및 외부 시스템 간 통합 지원
Spring Batch : 대용량 데이터 치리 및 배치 애플리케이션 지원(트랙잭션 ,로깅, 재시작등)
Spring Cloud : 클라우드 네이티브 애플리케이션 개발 지원(구성관리, 서비스검색, 회로차단기)
Spring Native : 스프링 앱을 네이티브 실행파일로 컴파일 가능하게 지원(성능 향상 및 경량화)
스프링mvc기본구성요소 : 
-	프런트 컨트롤러 :애플리케이션의 흐름관리
-	모델 : 애플리케이션의 데이터가 들어 있는 객체
-	컨트롤러 : 애플리케이션의 비즈니스 로직을 포함하는 자바 클래스
-	뷰 : 모델의 정보를 특정 형식에 맞게 표현
mvc구조
Spring MVC 동작 흐름
1.	사용자 요청: 웹 브라우저에서 URL 요청
2.	DispatcherServlet: 요청 수신 후 처리 흐름 제어 (Front Controller)
3.	HandlerMapping: 요청 URL에 해당하는 컨트롤러 결정
4.	Controller: 요청 처리 및 ModelAndView 객체 반환
5.	ViewResolver: 뷰 이름에 해당하는 실제 JSP 경로 결정
6.	View(JSP): 최종 화면 생성 및 사용자에게 응답 전송
Spring Mvc 핵심 구성요소
DIspatcherServlet , HandlerMapping , HandlerAdapter , Controller , ModelAndView, ViewResolver , View
웹프로젝트환경설정파일
web.xml
- 웹 프로젝트의 핵심 환경 설정 파일 (배치 설명자)
- 주요 역할:
  • DispatcherServlet 등록
  • 공통 context-param 등록 (루트 컨텍스트 설정)
  • 이벤트 리스너 등록 (ContextLoaderListener 등)
  • 필터 등록 (예: UTF-8 인코딩 필터)
• URL과 서블릿 매핑 설정
root-context.xml
- 스프링 루트 컨텍스트 설정 파일
- 주요 역할:
  • 웹 요청과 무관한 공통 Bean 설정 (Service, DAO, DB 등)
  • 전체 애플리케이션에서 공유되는 객체 정의
  • View 관련 설정은 포함하지 않음
servlet-context.xml
- 스프링 서블릿 컨텍스트 설정 파일 (Spring MVC 핵심 구성)
- 주요 역할:
  • @Controller, @RequestMapping 어노테이션 기반 컨트롤러 활성화
  • 컨트롤러 자동 스캔 설정 (component-scan)
  • 정적 리소스(css, js, 이미지 등) 경로 매핑
  • ViewResolver 설정을 통한 View 경로 구성
Bean 객체 (Spring Bean)
- Spring 컨테이너가 생성하고 관리하는 객체
- 주로 Service, Repository, Controller 등과 같은 구성 요소
- 특징:
  • 싱글톤 범위로 관리됨 (기본)
  • 의존성 주입(DI)을 통해 객체 간 결합도를 낮춤
• XML, Java Config, 어노테이션(@Component 등)으로 등록 가능
View (뷰)
- 사용자에게 보여지는 화면을 구성하는 요소
- Spring MVC에서는 컨트롤러가 반환한 모델 데이터를 시각적으로 표현
- 대표적인 뷰 기술: JSP, Thymeleaf, Freemarker 등
- ViewResolver를 통해 View 경로 및 확장자를 자동 매핑
- MVC의 마지막 단계로 사용자에게 응답을 생성하여 전달
Maven에서의 scope (의존성 범위)
- Maven 의존성이 어디서, 어떻게 적용될지를 지정하는 속성
- 주요 종류:
  • compile: 기본값, 모든 클래스 경로에서 사용됨 (빌드/테스트/실행 시 포함)
  • provided: 컨테이너(JDK, Tomcat 등)가 제공함 (컴파일 시 포함, 실행 시 제외)
  • runtime: 실행 시에만 필요한 라이브러리 (컴파일 시 제외됨)
  • test: 테스트 코드에서만 사용됨
  • system: 로컬에서 직접 지정한 JAR 파일 사용 (Maven repository에서 관리되지 않음)
• import: dependencyManagement에서 사용, 다른 POM의 의존성을 가져옴
📌 스프링 웹 MVC의 계층적 구조
도메인 객체 (Domain Object)
- 데이터 모델 정의 클래스
- 예: Book.java
퍼시스턴스 계층 (Persistence Layer)
- 데이터베이스 접근/처리 담당
- 예: BookRepository, BookRepositoryImpl
- @Repository 사용
서비스 계층 (Service Layer)
- 비즈니스 로직 처리
- 퍼시스턴스 계층과 프레젠테이션 계층의 연결 역할
- 예: BookService, BookServiceImpl
- @Service 사용
프레젠테이션 계층 (Presentation Layer)
- 사용자와 직접 상호작용
- 구성 요소:
  • Controller (@Controller): 사용자 요청 처리
  • View (JSP): 결과 화면 출력
  • Model: View로 전달되는 데이터
계층적 흐름 순서:
도메인 객체 → 퍼시스턴스 → 서비스 → 프레젠테이션(컨트롤러 → 뷰) 
계층적 구조 순서 (Layered Architecture)
1. 도메인 객체 (Domain Object) - 데이터 구조 정의 (예: Book.java)
2. 퍼시스턴스 계층 (Persistence Layer) - DB 접근/저장소 (예: BookRepository)
3. 서비스 계층 (Service Layer) - 비즈니스 로직 처리 (예: BookService)
4. 프레젠테이션 계층 (Presentation Layer)
   - 컨트롤러: 요청 처리 (예: BookController)
   - 뷰: 결과 출력 (예: books.jsp)
📌 뷰: books.jsp
- JSP 파일로 결과 화면 출력
- `${bookList}` 모델 데이터를 JSTL로 반복 출력
- Bootstrap 스타일 적용
- 사용 위치: `/WEB-INF/views/books.jsp`
스프링jdbc
스프링설정 -전체설정내용
📌 Component-scan 컨트롤러 등록
- `@Controller` 사용: 클래스가 컨트롤러 역할임을 명시
- Spring 설정 파일에 `<context:component-scan base-package="...">` 설정 시 자동 등록됨
📌 @RequestMapping (class/메서드)
- `@RequestMapping(value="/books", method=RequestMethod.GET)`
  → URL `/books` 요청이 들어오면 해당 메서드 실행
- 컨트롤러 메서드 단위에 사용되어 URL과 HTTP 메서드 매핑
📌 Model and View
- Spring에서 `Model` 객체를 사용하여 View에 데이터 전달
- 예: `model.addAttribute("bookList", list);` → `${bookList}`로 JSP에서 출력
- 반환값은 View 이름 (ex: `"books"`) → ViewResolver 통해 JSP 경로 완성됨

경로변수(처리하는방법) 매트릭스변수도 같음
스프링 폼태그 역할 제약사항 조건




