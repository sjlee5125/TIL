# 순차 탐색과 이진 탐색
## 순차 탐색 (Sequential Search)
- 정렬 여부에 관계없이 처음부터 끝까지 순서대로 탐색
- 평균 시간 복잡도: O(n)
- 정렬되어 있을 경우, 찾고자 하는 값보다 크면 탐색 종료
- 색인 순차 탐색(Index Sequential Search): 인덱스 테이블로 범위를 줄이고, 그 안에서 탐색
- 자기 구성 탐색(Self-Organizing Sequential Search): 자주 찾는 값을 앞에 위치시킴
### 구현 예시
```c
void sequentialSearch1(int a[], int n, int key) {
    int i = 0;
    while (i < n && a[i] != key) i++;
    if (i < n) printf("%d번째에 탐색 성공!\n", i + 1);
    else printf("%d번째에 탐색 실패!\n", i + 1);
}
```

## 이진 탐색 (Binary Search)
- **전제조건**: 데이터가 정렬되어 있어야 함
- 중앙값과 비교하며 범위를 절반으로 줄여가며 탐색
- 시간 복잡도: O(log n)
- 탐색 실패 시 탐색 중단 조건 필요

### 구현 예시
```c
ElementType BinarySearch(ElementType DataSet[], int Size, ElementType Target) {
    int Left = 0, Right = Size - 1;
    while (Left <= Right) {
        int Mid = (Left + Right) / 2;
        if (Target == DataSet[Mid]) return DataSet[Mid];
        else if (Target > DataSet[Mid]) Left = Mid + 1;
        else Right = Mid - 1;
    }
    return NULL;
}
```

---

# 이진 트리 개요

## 이진 트리의 특징
- 자식 노드 최대 2개
- 포화/완전/편향 이진 트리 등 존재

## 이진 트리 순회 (Traversal)
- **전위 순회**: 루트 → 왼쪽 → 오른쪽
- **중위 순회**: 왼쪽 → 루트 → 오른쪽
- **후위 순회**: 왼쪽 → 오른쪽 → 루트

## 이진 탐색 트리(Binary Search Tree, BST)
- 왼쪽 서브트리는 루트보다 작은 값
- 오른쪽 서브트리는 루트보다 큰 값
- 삽입/탐색/삭제가 모두 이진 탐색 기반

---

# Python 이진 탐색 응용 (문제 해결 방식)

## 문제 예: 원하는 정수 찾기
- 시간 제한 내에 `O(n log n)` 방식으로 해결 필요
- 입력 데이터 정렬 후 이진 탐색 적용

## 문제 예: 블루레이 만들기
- 조건에 맞는 최소 크기의 블루레이를 찾기 위한 **이진 탐색 최적화 문제**
- 시작: 가장 큰 레슨 시간, 종료: 전체 레슨 시간의 합
- 조건 만족 여부에 따라 범위 조정하며 탐색 진행

### 이진 탐색 슈도코드
```python
start = max(lessons)
end = sum(lessons)

while start <= end:
    mid = (start + end) // 2
    if condition(mid):  # 가능한지 확인
        result = mid
        end = mid - 1
    else:
        start = mid + 1
```
